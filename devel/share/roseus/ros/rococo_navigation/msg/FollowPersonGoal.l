;; Auto-generated. Do not edit!


(when (boundp 'rococo_navigation::FollowPersonGoal)
  (if (not (find-package "ROCOCO_NAVIGATION"))
    (make-package "ROCOCO_NAVIGATION"))
  (shadow 'FollowPersonGoal (find-package "ROCOCO_NAVIGATION")))
(unless (find-package "ROCOCO_NAVIGATION::FOLLOWPERSONGOAL")
  (make-package "ROCOCO_NAVIGATION::FOLLOWPERSONGOAL"))

(in-package "ROS")
;;//! \htmlinclude FollowPersonGoal.msg.html


(defclass rococo_navigation::FollowPersonGoal
  :super ros::object
  :slots (_person_id _max_vel ))

(defmethod rococo_navigation::FollowPersonGoal
  (:init
   (&key
    ((:person_id __person_id) 0)
    ((:max_vel __max_vel) 0.0)
    )
   (send-super :init)
   (setq _person_id (round __person_id))
   (setq _max_vel (float __max_vel))
   self)
  (:person_id
   (&optional __person_id)
   (if __person_id (setq _person_id __person_id)) _person_id)
  (:max_vel
   (&optional __max_vel)
   (if __max_vel (setq _max_vel __max_vel)) _max_vel)
  (:serialization-length
   ()
   (+
    ;; uint64 _person_id
    8
    ;; float32 _max_vel
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint64 _person_id
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _person_id (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _person_id) (= (length (_person_id . bv)) 2)) ;; bignum
              (write-long (ash (elt (_person_id . bv) 0) 0) s)
              (write-long (ash (elt (_person_id . bv) 1) -1) s))
             ((and (class _person_id) (= (length (_person_id . bv)) 1)) ;; big1
              (write-long (elt (_person_id . bv) 0) s)
              (write-long (if (>= _person_id 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _person_id s)(write-long (if (>= _person_id 0) 0 #xffffffff) s)))
     ;; float32 _max_vel
       (sys::poke _max_vel (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint64 _person_id
     
#+(or :alpha :irix6 :x86_64)
      (setf _person_id (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _person_id (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;; float32 _max_vel
     (setq _max_vel (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get rococo_navigation::FollowPersonGoal :md5sum-) "bc669fb86b77765b83a3fdd1f702ad5e")
(setf (get rococo_navigation::FollowPersonGoal :datatype-) "rococo_navigation/FollowPersonGoal")
(setf (get rococo_navigation::FollowPersonGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal
# target person
uint64  person_id
# max velocity [m/s]
float32 max_vel

")



(provide :rococo_navigation/FollowPersonGoal "bc669fb86b77765b83a3fdd1f702ad5e")


